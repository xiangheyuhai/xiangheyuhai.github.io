{"meta":{"title":"像河与海的博客","subtitle":"Stay hungry, Stay foolish","description":"十年饮冰，难凉热血","author":"像河与海","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"樊的第一篇博客文章","date":"2021-02-14T14:55:46.000Z","path":"2021/02/14/我的第一篇博客文章/","text":"#第一章##第二章###第三章","raw":"---\ntitle: 樊的第一篇博客文章\ndate: 2021-02-14 22:55:46\ntags: 大家好，我是像河与海！\n---\n\n#第一章\n##第二章\n###第三章\n","content":"<p>#第一章<br>##第二章<br>###第三章</p>\n","slug":"我的第一篇博客文章","updated":"2021-02-17T12:34:15.349Z","comments":true,"link":"","permalink":"http://example.com/2021/02/14/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0/","excerpt":"","categories":[],"tags":[{"name":"大家好，我是像河与海！","slug":"大家好，我是像河与海！","permalink":"http://example.com/tags/%E5%A4%A7%E5%AE%B6%E5%A5%BD%EF%BC%8C%E6%88%91%E6%98%AF%E5%83%8F%E6%B2%B3%E4%B8%8E%E6%B5%B7%EF%BC%81/"}]},{"title":"学习笔记_Git","date":"2021-02-05T14:55:46.000Z","path":"2021/02/05/学习笔记_Git/","text":"Git基本理论==四个工作区域== Git有四个工作区域：（本地的三个）工作目录、暂存区、资源库、（远程）远程git仓库 四个区域的转换关系如图： ==git的工作流程== １、在工作目录中添加、修改文件； ２、将需要进行版本管理的文件放入暂存区域；git add . ３、将暂存区域的文件提交到git仓库。 git conmmit 4、 推到远程 git push Git项目搭建 ==建立仓库== 本地仓库搭建搭建 右键新建的文件夹–Git Bush Here 在当前目录建立一个Git代码库 git init 克隆远程仓库 git clone 地址 Git文件操作==Git文件的四种状态== Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add .状态变为Staged Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件 Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add .可进入暂存staged状态, 使用git checkout则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 ! Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified ==操作命令== 12345git status 查看文件状态1. git add . 添加所有文件到暂存区2. git commit -m &quot;消息内容&quot; 提交暂存区中的内容到本地仓库 -m 信息（message） 3. git push ==忽略文件== ​ 有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等 ​ 在主目录下建立”.gitignore”文件，此文件有如下规则： 忽略文件中的空行或以井号（#）开始的行将会被忽略。 可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。 如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。 如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。 如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。 Git实际操作 ==提交文件== 123456git status 查看文件状态1. git add . 添加所有文件到暂存区2. git commit -m &quot;消息内容&quot; 提交暂存区中的内容到本地仓库 -m 信息（message） 或者git commit之后会出现一个界面，输入i，输入提交的备注；按下ESC，退出插入备注界面；输入ZZ恢复正常3. git push 123git add --all 添加所有文件git commit -m &#x27;all&#x27; 提交所有文件git push origion dev(你要push的分支) ==遇到问题== 用户名：gitee的账号 密码：gitee的密码","raw":"---\ntitle: 学习笔记_Git\ndate: 2021-02-05 22:55:46\ntags: Git\n---\n\n# Git基本理论\n\n==四个工作区域==\n\nGit有四个工作区域：（本地的三个）工作目录、暂存区、资源库、（远程）远程git仓库\n\n四个区域的转换关系如图：\n\n\n\n==git的工作流程==\n\n１、在工作目录中添加、修改文件；\n\n２、将需要进行版本管理的文件放入暂存区域；`git add .`\n\n３、将暂存区域的文件提交到git仓库。\t\t\t\t`git conmmit`\n\n4、 推到远程\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   `git push`\n\n# Git项目搭建\n\n ==建立仓库==\n\n* 本地仓库搭建搭建\n\n  右键新建的文件夹--Git Bush Here\n\n  在当前目录建立一个Git代码库   `git init`\n\n* 克隆远程仓库 \n\n  `git clone 地址`\n\n# Git文件操作\n\n==Git文件的四种状态==\n\n- Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过`git add .`状态变为**Staged**\n\n- Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用`git rm`移出版本库, 则成为**Untracked**文件\n\n- Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过`git add .`可进入暂存**staged**状态, 使用`git checkout`则丢弃修改过, 返回到**unmodify**状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !\n\n- Staged: 暂存状态. 执行`git commit`则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为**Unmodify**状态. 执行`git reset HEAD filename`取消暂存, 文件状态为**Modified**\n\n\n==操作命令==\n\n```c\ngit status   查看文件状态\n1. git add .    添加所有文件到暂存区\n2. git commit -m \"消息内容\"  提交暂存区中的内容到本地仓库\n           -m  \t\t信息（message） \n3. git push\n```\n\n==忽略文件==\n\n​        有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等\n\n​\t\t在主目录下建立\".gitignore\"文件，此文件有如下规则：\n\n1. 忽略文件中的空行或以井号（#）开始的行将会被忽略。\n\n2. 可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,...}）代表可选的字符串等。\n\n3. 如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。\n4. 如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。\n5. 如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。\n\n # Git实际操作\n\n==提交文件==\n\n```c\ngit status   查看文件状态\n1. git add .    添加所有文件到暂存区\n2. git commit -m \"消息内容\"  提交暂存区中的内容到本地仓库\n           -m  \t\t信息（message） \n    或者git commit之后会出现一个界面，输入i，输入提交的备注；按下ESC，退出插入备注界面；输入ZZ恢复正常\n3. git push\n```\n\n```c\ngit add --all  添加所有文件\ngit commit -m 'all'  提交所有文件\ngit push origion dev(你要push的分支)\n```\n\n==遇到问题==\n\n![](https://gitee.com/xiangheyuhai/fan-drawing-bed/raw/master/image-20210203200118601.png)\n\n用户名：gitee的账号\n\n密码：gitee的密码","content":"<h1 id=\"Git基本理论\"><a href=\"#Git基本理论\" class=\"headerlink\" title=\"Git基本理论\"></a>Git基本理论</h1><p>==四个工作区域==</p>\n<p>Git有四个工作区域：（本地的三个）工作目录、暂存区、资源库、（远程）远程git仓库</p>\n<p>四个区域的转换关系如图：</p>\n<p>==git的工作流程==</p>\n<p>１、在工作目录中添加、修改文件；</p>\n<p>２、将需要进行版本管理的文件放入暂存区域；<code>git add .</code></p>\n<p>３、将暂存区域的文件提交到git仓库。                <code>git conmmit</code></p>\n<p>4、 推到远程                                                               <code>git push</code></p>\n<h1 id=\"Git项目搭建\"><a href=\"#Git项目搭建\" class=\"headerlink\" title=\"Git项目搭建\"></a>Git项目搭建</h1><p> ==建立仓库==</p>\n<ul>\n<li><p>本地仓库搭建搭建</p>\n<p>右键新建的文件夹–Git Bush Here</p>\n<p>在当前目录建立一个Git代码库   <code>git init</code></p>\n</li>\n<li><p>克隆远程仓库 </p>\n<p><code>git clone 地址</code></p>\n</li>\n</ul>\n<h1 id=\"Git文件操作\"><a href=\"#Git文件操作\" class=\"headerlink\" title=\"Git文件操作\"></a>Git文件操作</h1><p>==Git文件的四种状态==</p>\n<ul>\n<li><p>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过<code>git add .</code>状态变为<strong>Staged</strong></p>\n</li>\n<li><p>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用<code>git rm</code>移出版本库, 则成为<strong>Untracked</strong>文件</p>\n</li>\n<li><p>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过<code>git add .</code>可进入暂存<strong>staged</strong>状态, 使用<code>git checkout</code>则丢弃修改过, 返回到<strong>unmodify</strong>状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !</p>\n</li>\n<li><p>Staged: 暂存状态. 执行<code>git commit</code>则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为<strong>Unmodify</strong>状态. 执行<code>git reset HEAD filename</code>取消暂存, 文件状态为<strong>Modified</strong></p>\n</li>\n</ul>\n<p>==操作命令==</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status   查看文件状态</span><br><span class=\"line\"><span class=\"number\">1.</span> git add .    添加所有文件到暂存区</span><br><span class=\"line\"><span class=\"number\">2.</span> git commit -m <span class=\"string\">&quot;消息内容&quot;</span>  提交暂存区中的内容到本地仓库</span><br><span class=\"line\">           -m  \t\t信息（message） </span><br><span class=\"line\"><span class=\"number\">3.</span> git push</span><br></pre></td></tr></table></figure>\n<p>==忽略文件==</p>\n<p>​        有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p>\n<p>​        在主目录下建立”.gitignore”文件，此文件有如下规则：</p>\n<ol>\n<li><p>忽略文件中的空行或以井号（#）开始的行将会被忽略。</p>\n</li>\n<li><p>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</p>\n</li>\n<li><p>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</p>\n</li>\n<li><p>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</p>\n</li>\n<li><p>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</p>\n<h1 id=\"Git实际操作\"><a href=\"#Git实际操作\" class=\"headerlink\" title=\"Git实际操作\"></a>Git实际操作</h1></li>\n</ol>\n<p>==提交文件==</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status   查看文件状态</span><br><span class=\"line\"><span class=\"number\">1.</span> git add .    添加所有文件到暂存区</span><br><span class=\"line\"><span class=\"number\">2.</span> git commit -m <span class=\"string\">&quot;消息内容&quot;</span>  提交暂存区中的内容到本地仓库</span><br><span class=\"line\">           -m  \t\t信息（message） </span><br><span class=\"line\">    或者git commit之后会出现一个界面，输入i，输入提交的备注；按下ESC，退出插入备注界面；输入ZZ恢复正常</span><br><span class=\"line\"><span class=\"number\">3.</span> git push</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add --all  添加所有文件</span><br><span class=\"line\">git commit -m &#x27;all&#x27;  提交所有文件</span><br><span class=\"line\"><span class=\"function\">git push origion <span class=\"title\">dev</span><span class=\"params\">(你要push的分支)</span></span></span><br></pre></td></tr></table></figure>\n<p>==遇到问题==</p>\n<p><img src=\"https://gitee.com/xiangheyuhai/fan-drawing-bed/raw/master/image-20210203200118601.png\"></p>\n<p>用户名：gitee的账号</p>\n<p>密码：gitee的密码</p>\n","slug":"学习笔记_Git","updated":"2021-02-17T12:32:13.598Z","comments":true,"link":"","permalink":"http://example.com/2021/02/05/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Git/","excerpt":"","categories":[],"tags":[{"name":"Git","slug":"Git","permalink":"http://example.com/tags/Git/"}]},{"title":"学习笔记_Typora","date":"2021-02-03T14:55:46.000Z","path":"2021/02/03/学习笔记_Typora/","text":"==标题== 一级标题用一个“#”内部跳转测试二级用2个“#”三级用3个“#”四级用4个“#”五级用5个“#”六级用6个“#”==删除线== 删除线用英文状态下的前后2个波浪号 ==斜体== 斜体是前后各加一个星号 ==加粗== 加粗是前后各加2个星号 ==斜体+加粗== 斜体跟加粗是前后各加3个星号 ==下划线== 下划线是输入完之后（ctrl + u） ==高亮== 高亮是前后两个等号 ==下标== 下标是前后各加一个波浪号，比如H2O ==上标== 上标是前后各加一个小尖尖，比如m^3^ ==表情== 先写一个英文状态的冒号，再输入英文，比如输入：smile :smile: :cow: :beer: ==表格== ctrl + t，选择插入表格 1 2 3 4 5 6 7 8 9 10 11 12 ==引用== 前面加一个右书名号（&gt;） 不知妻美刘强东 确实 ==列表== 无序列表：星号+空格 第一点 第二点 第三点 有序列表：数字，点，空格 第一点 第二点 第三点 ==代码块== 英文状态下输入三个点（~那个键），语言类型，输入代码 12345#include &lt;stdio.h&gt;int main(void)&#123; return 0;&#125; ==行内代码== 内容前后各加一个点 java ==分割线== 三个*或三个-或三个_ ==跳转== 外部跳转：格式为[link text](link) 比如：按住ctrl跳转到淘宝 内部跳转：格式为[link text](#要去的目的地) 比如：按住ctrl跳转到内部跳转测试 ==插入图片== 网络图片: ！[自己给图片起的名字](图片地址) 比如： 本地图片：！[自己给图片起的名字](如果跟此文档在同一目录下直接用文件名) 或者直接复制进来","raw":"---\ntitle: 学习笔记_Typora\ndate: 2021-02-03 22:55:46\ntags: Typora\n---\n\n==标题==\n\n# 一级标题用一个“#”\n\n# 内部跳转测试\n\n\n\n## 二级用2个“#”\n\n### 三级用3个“#”\n\n#### 四级用4个“#”\n\n##### 五级用5个“#”\n\n###### 六级用6个“#”\n\n==删除线==\n\n~~删除线用英文状态下的前后2个波浪号~~\n\n==斜体==\n\n*斜体是前后各加一个星号*\n\n==加粗==\n\n**加粗是前后各加2个星号**\n\n==斜体+加粗==\n\n***斜体跟加粗是前后各加3个星号***\n\n==下划线==\n\n<u>下划线是输入完之后（ctrl + u）</u>\n\n==高亮==\n\n`高亮是前后两个等号`\n\n==下标==\n\n下标是前后各加一个波浪号，比如H~2~O\n\n==上标==\n\n上标是前后各加一个小尖尖，比如m^3^\n\n==表情==\n\n先写一个英文状态的冒号，再输入英文，比如输入：smile\n\n:smile:\n\n:cow: :beer:\n\n==表格==\n\nctrl  + t，选择插入表格\n\n| 1    | 2    | 3    | 4    |\n| ---- | ---- | ---- | ---- |\n| 5    | 6    | 7    | 8    |\n| 9    | 10   | 11   | 12   |\n\n\n\n==引用==\n\n前面加一个右书名号（>）\n\n> 不知妻美刘强东\n>\n> > 确实\n\n==列表==\n\n`无序列表：星号+空格`\n\n* 第一点\n* 第二点\n* 第三点\n\n`有序列表：数字，点，空格`\n\n1. 第一点\n2. 第二点\n3. 第三点\n\n==代码块==\n\n英文状态下输入三个点（~那个键），语言类型，输入代码\n\n```c\n#include <stdio.h>\nint main(void)\n{\n    return 0;\n}\n```\n\n==行内代码==\n\n内容前后各加一个点\n\n`java`\n\n==分割线==\n\n三个*或三个-或三个_\n\n***\n\n---\n\n___\n\n\n\n==跳转==\n\n`外部跳转`：格式为`[link text](link)`\n\n比如：[按住ctrl跳转到淘宝](http://www.taobao.com)\n\n`内部跳转`：格式为`[link text](#要去的目的地)`\n\n比如：[按住ctrl跳转到内部跳转测试](#内部跳转测试)\n\n==插入图片==\n\n`网络图片: ！[自己给图片起的名字](图片地址)`\n\n比如：\n\n![钢铁侠](https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2782264667,4105445696&fm=26&gp=0.jpg)\n\n\n\n`本地图片：！[自己给图片起的名字](如果跟此文档在同一目录下直接用文件名)  或者直接复制进来`\n\n","content":"<p>==标题==</p>\n<h1 id=\"一级标题用一个“-”\"><a href=\"#一级标题用一个“-”\" class=\"headerlink\" title=\"一级标题用一个“#”\"></a>一级标题用一个“#”</h1><h1 id=\"内部跳转测试\"><a href=\"#内部跳转测试\" class=\"headerlink\" title=\"内部跳转测试\"></a>内部跳转测试</h1><h2 id=\"二级用2个“-”\"><a href=\"#二级用2个“-”\" class=\"headerlink\" title=\"二级用2个“#”\"></a>二级用2个“#”</h2><h3 id=\"三级用3个“-”\"><a href=\"#三级用3个“-”\" class=\"headerlink\" title=\"三级用3个“#”\"></a>三级用3个“#”</h3><h4 id=\"四级用4个“-”\"><a href=\"#四级用4个“-”\" class=\"headerlink\" title=\"四级用4个“#”\"></a>四级用4个“#”</h4><h5 id=\"五级用5个“-”\"><a href=\"#五级用5个“-”\" class=\"headerlink\" title=\"五级用5个“#”\"></a>五级用5个“#”</h5><h6 id=\"六级用6个“-”\"><a href=\"#六级用6个“-”\" class=\"headerlink\" title=\"六级用6个“#”\"></a>六级用6个“#”</h6><p>==删除线==</p>\n<p><del>删除线用英文状态下的前后2个波浪号</del></p>\n<p>==斜体==</p>\n<p><em>斜体是前后各加一个星号</em></p>\n<p>==加粗==</p>\n<p><strong>加粗是前后各加2个星号</strong></p>\n<p>==斜体+加粗==</p>\n<p><strong><em>斜体跟加粗是前后各加3个星号</em></strong></p>\n<p>==下划线==</p>\n<p><u>下划线是输入完之后（ctrl + u）</u></p>\n<p>==高亮==</p>\n<p><code>高亮是前后两个等号</code></p>\n<p>==下标==</p>\n<p>下标是前后各加一个波浪号，比如H<del>2</del>O</p>\n<p>==上标==</p>\n<p>上标是前后各加一个小尖尖，比如m^3^</p>\n<p>==表情==</p>\n<p>先写一个英文状态的冒号，再输入英文，比如输入：smile</p>\n<p>:smile:</p>\n<p>:cow: :beer:</p>\n<p>==表格==</p>\n<p>ctrl  + t，选择插入表格</p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n<th>4</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>5</td>\n<td>6</td>\n<td>7</td>\n<td>8</td>\n</tr>\n<tr>\n<td>9</td>\n<td>10</td>\n<td>11</td>\n<td>12</td>\n</tr>\n</tbody></table>\n<p>==引用==</p>\n<p>前面加一个右书名号（&gt;）</p>\n<blockquote>\n<p>不知妻美刘强东</p>\n<blockquote>\n<p>确实</p>\n</blockquote>\n</blockquote>\n<p>==列表==</p>\n<p><code>无序列表：星号+空格</code></p>\n<ul>\n<li>第一点</li>\n<li>第二点</li>\n<li>第三点</li>\n</ul>\n<p><code>有序列表：数字，点，空格</code></p>\n<ol>\n<li>第一点</li>\n<li>第二点</li>\n<li>第三点</li>\n</ol>\n<p>==代码块==</p>\n<p>英文状态下输入三个点（~那个键），语言类型，输入代码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>==行内代码==</p>\n<p>内容前后各加一个点</p>\n<p><code>java</code></p>\n<p>==分割线==</p>\n<p>三个*或三个-或三个_</p>\n<hr>\n<hr>\n<hr>\n<p>==跳转==</p>\n<p><code>外部跳转</code>：格式为<code>[link text](link)</code></p>\n<p>比如：<a href=\"http://www.taobao.com/\">按住ctrl跳转到淘宝</a></p>\n<p><code>内部跳转</code>：格式为<code>[link text](#要去的目的地)</code></p>\n<p>比如：<a href=\"#%E5%86%85%E9%83%A8%E8%B7%B3%E8%BD%AC%E6%B5%8B%E8%AF%95\">按住ctrl跳转到内部跳转测试</a></p>\n<p>==插入图片==</p>\n<p><code>网络图片: ！[自己给图片起的名字](图片地址)</code></p>\n<p>比如：</p>\n<p><img src=\"https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=2782264667,4105445696&fm=26&gp=0.jpg\" alt=\"钢铁侠\"></p>\n<p><code>本地图片：！[自己给图片起的名字](如果跟此文档在同一目录下直接用文件名)  或者直接复制进来</code></p>\n","slug":"学习笔记_Typora","updated":"2021-02-17T08:06:31.240Z","comments":true,"link":"","permalink":"http://example.com/2021/02/03/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0_Typora/","excerpt":"","categories":[],"tags":[{"name":"Typora","slug":"Typora","permalink":"http://example.com/tags/Typora/"}]}],"categories":[],"tags":[{"name":"大家好，我是像河与海！","slug":"大家好，我是像河与海！","permalink":"http://example.com/tags/%E5%A4%A7%E5%AE%B6%E5%A5%BD%EF%BC%8C%E6%88%91%E6%98%AF%E5%83%8F%E6%B2%B3%E4%B8%8E%E6%B5%B7%EF%BC%81/"},{"name":"Git","slug":"Git","permalink":"http://example.com/tags/Git/"},{"name":"Typora","slug":"Typora","permalink":"http://example.com/tags/Typora/"}]}